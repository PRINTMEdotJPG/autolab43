import random
import math
import time
from datetime import datetime
from typing import Dict, List, Optional
import numpy as np
from scipy.signal import find_peaks

class VirtualArduino:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.base_temp = 20.0 + random.uniform(-1.5, 1.5)
        self.sensors = {
            'temperature': self.base_temp,
            'voltage': 5.0 + random.uniform(-0.05, 0.05),
            'microphone': 512,
            'tube_position': 0.0,
            'frequency': 1500
        }
        self.baudrate = 9600
        self.port = "COM3"
        self.is_connected = False
        self.experiment_start_time = 0
        self.current_frequency = 1500
        self.tube_velocity = 0.8  # –º–º/—Å–µ–∫
        self.last_update = time.time()
        
    def connect(self) -> bool:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.is_connected = True
        return True
        
    def update_sensors(self):
        """–§–∏–∑–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤"""
        t = time.time() - self.experiment_start_time
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å –¥—Ä–µ–π—Ñ–æ–º –∏ —à—É–º–æ–º
        temp_drift = 0.1 * math.sin(t / 15)
        temp_noise = random.gauss(0, 0.05)
        self.sensors['temperature'] = round(
            self.base_temp + temp_drift + temp_noise, 2
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
        wavelength = 343 / self.current_frequency
        path_difference = 2 * self.sensors['tube_position'] / 1000
        
        # –§–∏–∑–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        interference = math.cos(2 * math.pi * path_difference / wavelength)
        base_signal = 600 * (1 + interference) 
        noise = random.gauss(0, 15)
        
        self.sensors['microphone'] = int(max(50, min(950, base_signal + noise))
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç—Ä—É–±—ã —Å —Ç–æ—á–Ω—ã–º–∏ –º–∏–Ω–∏–º—É–º–∞–º–∏
        if (abs(interference + 1) < 0.1):  # –¢–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            self.sensors['tube_position'] = round(self.sensors['tube_position'] / (wavelength * 500)) * wavelength * 500
            self.tube_velocity = 0.5 + random.uniform(-0.1, 0.1)
        else:
            self.sensors['tube_position'] += self.tube_velocity
            self.sensors['tube_position'] = round(
                max(0, min(1000, self.sensors['tube_position']), 2
            )
        
    def read_data(self) -> Dict:
        if not self.is_connected:
            raise ConnectionError("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Arduino")
            
        self.update_sensors()
        time.sleep(0.02 + random.uniform(0, 0.01))  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return {
            'time_ms': int((time.time() - self.last_update) * 1000),
            'temperature': self.sensors['temperature'],
            'voltage': round(self.sensors['voltage'], 3),
            'microphone': self.sensors['microphone'],
            'position': self.sensors['tube_position'],
            'frequency': self.sensors['frequency'],
            'status': 'OK'
        }
        
    def send_command(self, command: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        if command == "START":
            self.experiment_start_time = time.time()
            self.tube_velocity = 0.8  # –°–±—Ä–æ—Å —Å–∫–æ—Ä–æ—Å—Ç–∏
            return True
        elif command == "STOP":
            self.tube_velocity = 0.0
            return True
        elif command.startswith("SET_FREQ"):
            try:
                freq = int(command.split()[1])
                if 1450 <= freq <= 6050:
                    self.current_frequency = freq
                    self.sensors['frequency'] = freq
                    time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã
                    return True
            except:
                pass
        return False


class ExperimentSimulator:
    """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    
    def __init__(self, user_id: int, group_name: str):
        self.user_id = user_id
        self.group_name = group_name
        self.arduino = VirtualArduino()
        self.arduino.connect()
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.R = 8.314462618  # –î–∂/(–º–æ–ª—å¬∑–ö)
        self.M_air = 0.0289647  # –∫–≥/–º–æ–ª—å
        self.gamma_ref = 1.400  # –î–ª—è —Å—É—Ö–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞
        
    def run_experiment(self, frequencies: List[int] = None) -> Dict:
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        frequencies = frequencies or [1500, 2250, 3000]
        results = []
        full_sensor_data = []
        
        for freq in sorted(frequencies):
            if not 1450 <= freq <= 6050:
                continue
                
            self.arduino.send_command(f"SET_FREQ {freq}")
            data = self._collect_data(freq)
            analysis = self._analyze_run(data, freq)
            
            full_sensor_data.extend(data)
            results.append(analysis)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        valid_results = [r for r in results if r['status'] == 'success']
        avg_gamma = np.mean([r['gamma'] for r in valid_results]) if valid_results else 0.0
        avg_error = abs(avg_gamma - self.gamma_ref)/self.gamma_ref*100 if valid_results else 100.0
        
        return {
            'user_id': self.user_id,
            'group_name': self.group_name,
            'temperature': self.arduino.sensors['temperature'],
            'frequencies': frequencies,
            'sensor_data': full_sensor_data,
            'gamma_calculated': round(avg_gamma, 4),
            'gamma_reference': self.gamma_ref,
            'error_percent': round(avg_error, 2),
            'status': 'success' if avg_error < 2.5 else 'fail',
            'timestamp': datetime.now().isoformat(),
            'details': results
        }
    
    def _collect_data(self, freq: int) -> List[Dict]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        self.arduino.send_command("START")
        data = []
        
        for _ in range(120):  # 120 –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ 0.1 —Å–µ–∫ = 12 —Å–µ–∫
            try:
                d = self.arduino.read_data()
                data_point = {
                    'time_ms': d['time_ms'],
                    'temperature': d['temperature'],
                    'microphone': d['microphone'],
                    'position': d['position'],
                    'frequency': d['frequency'],
                    'voltage': d['voltage']
                }
                data.append(data_point)
                time.sleep(0.1 + random.uniform(-0.02, 0.02))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                continue
                
        self.arduino.send_command("STOP")
        return data
    
    def _analyze_run(self, data: List[Dict], freq: int) -> Dict:
        """–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã"""
        positions = np.array([d['position'] for d in data])
        signals = np.array([d['microphone'] for d in data])
        
        # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        smoothed = np.convolve(signals, np.ones(5)/5, mode='valid')
        minima = find_peaks(-smoothed, prominence=40, distance=15)[0] + 2
        
        if len(minima) < 3:
            return {'frequency': freq, 'status': 'fail', 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∏–Ω–∏–º—É–º–æ–≤'}
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Œª
        x = np.arange(len(minima))
        y = positions[minima]
        coeffs = np.polyfit(x, y, 1)
        delta_L = coeffs[0]  # –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –º–∏–Ω–∏–º—É–º–∞–º–∏
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        wavelength = 2 * delta_L / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–º –≤ –º–µ—Ç—Ä—ã
        v_sound = freq * wavelength
        T_kelvin = data[0]['temperature'] + 273.15
        
        gamma = (v_sound**2 * self.M_air) / (self.R * T_kelvin)
        error = abs(gamma - self.gamma_ref) / self.gamma_ref * 100
        
        return {
            'frequency': freq,
            'wavelength': round(wavelength, 4),
            'speed_sound': round(v_sound, 2),
            'gamma': round(gamma, 4),
            'error_percent': round(error, 2),
            'status': 'success' if error < 3.0 else 'fail',
            'minima_count': len(minima),
            'delta_L': round(delta_L, 2)
        }


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n")
    
    simulator = ExperimentSimulator(user_id=1, group_name="–§–ò–ó-101")
    results = simulator.run_experiment(frequencies=[1500, 2500, 3500])
    
    print(f"üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ #{results['timestamp']}")
    print(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {results['temperature']}¬∞C")
    print(f"üì∂ –ß–∞—Å—Ç–æ—Ç—ã: {results['frequencies']} –ì—Ü")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {results['status'].upper()}")
    print(f"üìä –ì–∞–º–º–∞: {results['gamma_calculated']} (—ç—Ç–∞–ª–æ–Ω {results['gamma_reference']})")
    print(f"üìâ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {results['error_percent']}%")
    
    print("\n–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–∞–º:")
    for res in results['details']:
        status = '‚úÖ –£–°–ü–ï–•' if res['status'] == 'success' else '‚ùå –û–®–ò–ë–ö–ê'
        print(f"\nüì° {res['frequency']} –ì—Ü: {status}")
        if res['status'] == 'success':
            print(f"   Œª = {res['wavelength']} –º")
            print(f"   v = {res['speed_sound']} –º/—Å")
            print(f"   Œ≥ = {res['gamma']} (¬±{res['error_percent']}%)")