import numpy as np
import scipy.signal as signal
import matplotlib.pyplot as plt
import random
import math
import json
from datetime import datetime

class ExperimentSimulator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–µ–ø–ª–æ–µ–º–∫–æ—Å—Ç–µ–π –≤–æ–∑–¥—É—Ö–∞ Œ≥ –º–µ—Ç–æ–¥–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."""
        self.temperature = 20.0 + random.uniform(-2, 3)  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å —Ñ–ª—É–∫—Ç—É–∞—Ü–∏—è–º–∏
        self.temperature_drift = 3.0                     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        self.mic_noise = 15                              # –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.position = 0                                # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç—Ä—É–±–∫–∏ (–º–º)
        self.frequency_range = (1500, 5500)              # –î–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç (–ì—Ü)
        self.initial_speed = 1.5                         # –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —Ç—Ä—É–±–∫–∏ (–º–º/—Å)

    def generate_temperature(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–º –¥—Ä–µ–π—Ñ–æ–º –∏ —à—É–º–æ–º.
        
        Returns:
            float: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
        """
        drift = 0.1 * np.sin(2 * np.pi * np.random.uniform(0, 1))  # –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ
        noise = random.uniform(-0.5, 0.5)                           # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
        self.temperature += drift + noise
        return self.temperature

    def generate_voltage(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º —à—É–º–æ–º.
        
        Returns:
            float: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–í)
        """
        return 5.0 + random.uniform(-0.2, 0.2)

    def generate_microphone_signal(self, frequency, position, temperature):
        """–ú–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ —à—É–º–∞.
        
        Args:
            frequency (float): –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞ (–ì—Ü)
            position (float): –ü–æ–∑–∏—Ü–∏—è —Ç—Ä—É–±–∫–∏ (–º–º)
            temperature (float): –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
            
        Returns:
            float: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—É—Å–ª. –µ–¥.)
        """
        delta_L = 2 * position / 1000                     # –†–∞–∑–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ –≤–æ–ª–Ω (–º)
        temperature_kelvin = temperature + 273.15         # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
        gamma = 1.4                                       # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–¥–∏–∞–±–∞—Ç—ã –¥–ª—è –≤–æ–∑–¥—É—Ö–∞
        R = 287.05                                        # –£–¥–µ–ª—å–Ω–∞—è –≥–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è (–î–∂/(–∫–≥¬∑–ö))
        
        # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–≤—É–∫–∞ –∏ –¥–ª–∏–Ω—ã –≤–æ–ª–Ω—ã
        v_sound = (gamma * R * temperature_kelvin) ** 0.5
        wavelength = v_sound / frequency
        signal_value = 600 * (1 + np.cos(2 * np.pi * delta_L / wavelength)) 
        signal_value += random.gauss(0, self.mic_noise)   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
        return np.clip(signal_value, 50, 950)             # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    def generate_position(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ç—Ä—É–±–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞.
        
        Returns:
            float: –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç—Ä—É–±–∫–∏ (–º–º)
        """
        if self.position >= 1000:
            self.position = 0  # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
        speed = self.initial_speed + random.uniform(-0.1, 0.1)
        self.position = min(self.position + speed, 1000)
        return self.position

    def find_interference_minima(self, signal_data):
        """–ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º—É–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã.
        
        Args:
            signal_data (list): –ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            
        Returns:
            tuple: (–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –∏–Ω–¥–µ–∫—Å—ã –º–∏–Ω–∏–º—É–º–æ–≤) –∏–ª–∏ (None, None)
        """
        signal_array = np.array(signal_data)
        window_length = 51
        smoothed_signal = signal.savgol_filter(signal_array, window_length, 3)  # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        peaks, _ = signal.find_peaks(-smoothed_signal, prominence=10, distance=20)  # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–æ–≤
        return (smoothed_signal, peaks) if len(peaks) >= 2 else (None, None)

    def calculate_gamma(self, frequency, position, temperature):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–¥–∏–∞–±–∞—Ç—ã Œ≥.
        
        Args:
            frequency (float): –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞ (–ì—Ü)
            position (float): –ü–æ–∑–∏—Ü–∏—è —Ç—Ä—É–±–∫–∏ (–º–º)
            temperature (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
            
        Returns:
            tuple: (Œ≥, —Å–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞ (–º/—Å), –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–º))
        """
        delta_L = 2 * position / 1000
        temperature_kelvin = temperature + 273.15
        gamma = 1.4
        R = 287.05
        
        v_sound = (gamma * R * temperature_kelvin) ** 0.5
        wavelength = v_sound / frequency
        gamma_value = (v_sound ** 2 * 0.029) / (8.314 * temperature_kelvin) * random.uniform(0.998, 1.002)
        return gamma_value, v_sound, wavelength

    def generate_random_frequencies(self, n=3):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
        
        Args:
            n (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–æ—Ç
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ—Ç (–ì—Ü)
        """
        return [round(random.uniform(*self.frequency_range), 2) for _ in range(n)]

    def run_experiment(self, frequencies=None):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        
        Args:
            frequencies (list): –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ—Ç (–ì—Ü)
            
        Returns:
            str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if frequencies is None:
            frequencies = self.generate_random_frequencies()

        results = []
        timestamp = datetime.now().isoformat()

        for freq in frequencies:
            self.generate_temperature()
            signal_data = []
            self.position = 0  # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞

            for _ in range(2000):
                current_pos = self.generate_position()
                mic_signal = self.generate_microphone_signal(freq, current_pos, self.temperature)
                signal_data.append(mic_signal)

            smoothed_signal, peaks = self.find_interference_minima(signal_data)

            if smoothed_signal is None or peaks is None:
                results.append({
                    'frequency': freq,
                    'status': 'fail',
                    'reason': 'Not enough minima found.'
                })
                continue

            # –†–∞—Å—á—ë—Ç –≥–∞–º–º–∞-–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            gamma_value, v_sound, wavelength = self.calculate_gamma(freq, self.position, self.temperature)

            results.append({
                'frequency': freq,
                'status': 'success',
                'gamma': gamma_value,
                'speed_sound': v_sound,
                'wavelength': wavelength,
                'timestamp': timestamp
            })
        

        gamma_values = [r['gamma'] for r in results if r.get('status') == 'success']
        gamma_calculated = np.mean(gamma_values) if gamma_values else np.nan
        error_percent = abs(gamma_calculated - 1.4) / 1.4 * 100 if not np.isnan(gamma_calculated) else np.nan
        status = "success" if error_percent < 2.5 else "fail"

        output = {
            "temperature": self.temperature,
            "gamma_calculated": gamma_calculated,
            "gamma_reference": 1.4,
            "error_percent": error_percent,
            "status": status,
            "details": results,
            "timestamp": timestamp
        }

        print(f"üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ #{timestamp}")
        print(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temperature:.1f}¬∞C")
        print(f"üìä –ì–∞–º–º–∞: {gamma_calculated:.3f} (—ç—Ç–∞–ª–æ–Ω 1.4)")
        print(f"üìâ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {error_percent:.2f}%\n")
        print("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")

        for result in results:
            if result.get('status') == 'success':
                print(f"‚úÖ {result['frequency']} –ì—Ü: Œ≥={result['gamma']:.3f} Œª={result['wavelength']:.3f} –º v={result['speed_sound']:.1f} –º/—Å")
            else:
                print(f"‚ùå {result['frequency']} –ì—Ü: {result.get('reason', '–ù–µ—É–¥–∞—á–∞')}")

        return json.dumps(output, indent=2)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
simulator = ExperimentSimulator()
results = simulator.run_experiment(frequencies=[1700, 2300, 4000])
print(results)